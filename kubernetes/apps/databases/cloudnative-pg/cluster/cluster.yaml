---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres1
  namespace: databases
  annotations:
    kyverno.io/ignore: "true"
spec:
  instances: 3
  imageName: ghcr.io/cloudnative-pg/postgresql:16.2-10
  primaryUpdateStrategy: unsupervised
  storage:
    size: 50Gi
    storageClass: ceph-filesystem
  superuserSecret:
    name: cloudnative-pg-secret
  enableSuperuserAccess: true
  postgresql:
    parameters:
      max_connections: "300"
      shared_buffers: 512MB
      pg_stat_statements.max: "10000"
      pg_stat_statements.track: all
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true
  monitoring:
    enablePodMonitor: true
    # Ref: https://github.com/cloudnative-pg/cloudnative-pg/issues/2501
    podMonitorMetricRelabelings:
      - { sourceLabels: ["cluster"], targetLabel: cnpg_cluster, action: replace }
      - { regex: cluster, action: labeldrop }
  backup:
    retentionPolicy: 30d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
#     wal:
 #      compression: bzip2
  #     maxParallel: 2
      destinationPath: s3://cnpg/
      endpointURL: http://minio.bharris.co:9000
      # Note: serverName version needs to be inclemented
      # when recovering from an existing cnpg cluster
      serverName: &currentCluster postgres1
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-secret
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg-secret
          key: aws-secret-access-key
  # Note: previousCluster needs to be set to the name of the previous
  # cluster when recovering from an existing cnpg cluster
# bootstrap:
  # recovery:
    # source: &previousCluster postgres
  # Note: externalClusters is needed when recovering from an existing cnpg cluster
# externalClusters:
  # - name: *previousCluster
    # barmanObjectStore:
      # <<: *barmanObjectStore
      # serverName: *previousCluster
